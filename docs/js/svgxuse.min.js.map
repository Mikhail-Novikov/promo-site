{"version":3,"sources":["svgxuse.js"],"names":["window","addEventListener","checkUseElems","tid","cache","Object","create","debouncedCheck","clearTimeout","setTimeout","unobserveChanges","observeChanges","observer","MutationObserver","observe","document","documentElement","childList","subtree","attributes","disconnect","removeEventListener","ignore","createRequest","url","getOrigin","loc","a","undefined","protocol","createElement","href","replace","host","Request","origin","origin2","XMLHttpRequest","location","withCredentials","XDomainRequest","xlinkNS","observeIfDone","inProgressCount","attrUpdateFunc","spec","base","useEl","setAttributeNS","hash","hasAttribute","setAttribute","onErrorTimeout","xhr","onerror","ontimeout","bcr","i","isHidden","uses","getElementsByTagName","length","getBoundingClientRect","getAttribute","getAttributeNS","split","left","right","top","bottom","width","height","onload","svg","body","x","innerHTML","responseText","style","position","overflow","insertBefore","firstChild","open","send","abort","winLoad","readyState"],"mappings":"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","file":"svgxuse.min.js","sourcesContent":["/*!\n * @copyright Copyright (c) 2017 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.2.6\n */\n/*jslint browser: true */\n/*global XDomainRequest, MutationObserver, window */\n(function () {\n    \"use strict\";\n    if (typeof window !== \"undefined\" && window.addEventListener) {\n        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n        var checkUseElems;\n        var tid; // timeout id\n        var debouncedCheck = function () {\n            clearTimeout(tid);\n            tid = setTimeout(checkUseElems, 100);\n        };\n        var unobserveChanges = function () {\n            return;\n        };\n        var observeChanges = function () {\n            var observer;\n            window.addEventListener(\"resize\", debouncedCheck, false);\n            window.addEventListener(\"orientationchange\", debouncedCheck, false);\n            if (window.MutationObserver) {\n                observer = new MutationObserver(debouncedCheck);\n                observer.observe(document.documentElement, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true\n                });\n                unobserveChanges = function () {\n                    try {\n                        observer.disconnect();\n                        window.removeEventListener(\"resize\", debouncedCheck, false);\n                        window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n                    } catch (ignore) {}\n                };\n            } else {\n                document.documentElement.addEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n                unobserveChanges = function () {\n                    document.documentElement.removeEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n                    window.removeEventListener(\"resize\", debouncedCheck, false);\n                    window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n                };\n            }\n        };\n        var createRequest = function (url) {\n            // In IE 9, cross origin requests can only be sent using XDomainRequest.\n            // XDomainRequest would fail if CORS headers are not set.\n            // Therefore, XDomainRequest should only be used with cross origin requests.\n            function getOrigin(loc) {\n                var a;\n                if (loc.protocol !== undefined) {\n                    a = loc;\n                } else {\n                    a = document.createElement(\"a\");\n                    a.href = loc;\n                }\n                return a.protocol.replace(/:/g, \"\") + a.host;\n            }\n            var Request;\n            var origin;\n            var origin2;\n            if (window.XMLHttpRequest) {\n                Request = new XMLHttpRequest();\n                origin = getOrigin(location);\n                origin2 = getOrigin(url);\n                if (Request.withCredentials === undefined && origin2 !== \"\" && origin2 !== origin) {\n                    Request = XDomainRequest || undefined;\n                } else {\n                    Request = XMLHttpRequest;\n                }\n            }\n            return Request;\n        };\n        var xlinkNS = \"http://www.w3.org/1999/xlink\";\n        checkUseElems = function () {\n            var base;\n            var bcr;\n            var fallback = \"\"; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n            var hash;\n            var href;\n            var i;\n            var inProgressCount = 0;\n            var isHidden;\n            var Request;\n            var url;\n            var uses;\n            var xhr;\n            function observeIfDone() {\n                // If done with making changes, start watching for chagnes in DOM again\n                inProgressCount -= 1;\n                if (inProgressCount === 0) { // if all xhrs were resolved\n                    unobserveChanges(); // make sure to remove old handlers\n                    observeChanges(); // watch for changes to DOM\n                }\n            }\n            function attrUpdateFunc(spec) {\n                return function () {\n                    if (cache[spec.base] !== true) {\n                        spec.useEl.setAttributeNS(xlinkNS, \"xlink:href\", \"#\" + spec.hash);\n                        if (spec.useEl.hasAttribute(\"href\")) {\n                            spec.useEl.setAttribute(\"href\", \"#\" + spec.hash);\n                        }\n                    }\n                };\n            }\n            function onloadFunc(xhr) {\n                return function () {\n                    var body = document.body;\n                    var x = document.createElement(\"x\");\n                    var svg;\n                    xhr.onload = null;\n                    x.innerHTML = xhr.responseText;\n                    svg = x.getElementsByTagName(\"svg\")[0];\n                    if (svg) {\n                        svg.setAttribute(\"aria-hidden\", \"true\");\n                        svg.style.position = \"absolute\";\n                        svg.style.width = 0;\n                        svg.style.height = 0;\n                        svg.style.overflow = \"hidden\";\n                        body.insertBefore(svg, body.firstChild);\n                    }\n                    observeIfDone();\n                };\n            }\n            function onErrorTimeout(xhr) {\n                return function () {\n                    xhr.onerror = null;\n                    xhr.ontimeout = null;\n                    observeIfDone();\n                };\n            }\n            unobserveChanges(); // stop watching for changes to DOM\n            // find all use elements\n            uses = document.getElementsByTagName(\"use\");\n            for (i = 0; i < uses.length; i += 1) {\n                try {\n                    bcr = uses[i].getBoundingClientRect();\n                } catch (ignore) {\n                    // failed to get bounding rectangle of the use element\n                    bcr = false;\n                }\n                href = uses[i].getAttribute(\"href\")\n                        || uses[i].getAttributeNS(xlinkNS, \"href\")\n                        || uses[i].getAttribute(\"xlink:href\");\n                if (href && href.split) {\n                    url = href.split(\"#\");\n                } else {\n                    url = [\"\", \"\"];\n                }\n                base = url[0];\n                hash = url[1];\n                isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n                    // the use element is empty\n                    // if there is a reference to an external SVG, try to fetch it\n                    // use the optional fallback URL if there is no reference to an external SVG\n                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n                        base = fallback;\n                    }\n                    if (uses[i].hasAttribute(\"href\")) {\n                        uses[i].setAttributeNS(xlinkNS, \"xlink:href\", href);\n                    }\n                    if (base.length) {\n                        // schedule updating xlink:href\n                        xhr = cache[base];\n                        if (xhr !== true) {\n                            // true signifies that prepending the SVG was not required\n                            setTimeout(attrUpdateFunc({\n                                useEl: uses[i],\n                                base: base,\n                                hash: hash\n                            }), 0);\n                        }\n                        if (xhr === undefined) {\n                            Request = createRequest(base);\n                            if (Request !== undefined) {\n                                xhr = new Request();\n                                cache[base] = xhr;\n                                xhr.onload = onloadFunc(xhr);\n                                xhr.onerror = onErrorTimeout(xhr);\n                                xhr.ontimeout = onErrorTimeout(xhr);\n                                xhr.open(\"GET\", base);\n                                xhr.send();\n                                inProgressCount += 1;\n                            }\n                        }\n                    }\n                } else {\n                    if (!isHidden) {\n                        if (cache[base] === undefined) {\n                            // remember this URL if the use element was not empty and no request was sent\n                            cache[base] = true;\n                        } else if (cache[base].onload) {\n                            // if it turns out that prepending the SVG is not necessary,\n                            // abort the in-progress xhr.\n                            cache[base].abort();\n                            delete cache[base].onload;\n                            cache[base] = true;\n                        }\n                    } else if (base.length && cache[base]) {\n                        setTimeout(attrUpdateFunc({\n                            useEl: uses[i],\n                            base: base,\n                            hash: hash\n                        }), 0);\n                    }\n                }\n            }\n            uses = \"\";\n            inProgressCount += 1;\n            observeIfDone();\n        };\n        var winLoad;\n        winLoad = function () {\n            window.removeEventListener(\"load\", winLoad, false); // to prevent memory leaks\n            tid = setTimeout(checkUseElems, 0);\n        };\n        if (document.readyState !== \"complete\") {\n            // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n            window.addEventListener(\"load\", winLoad, false);\n        } else {\n            // No need to add a listener if the document is already loaded, initialize immediately.\n            winLoad();\n        }\n    }\n}());\n"],"sourceRoot":"/source/"}